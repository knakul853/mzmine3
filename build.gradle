import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        maven {url "https://jitpack.io"}
    }
    dependencies {
        classpath "com.github.siordache-forks:javafx-gradle-plugin:jitpack-SNAPSHOT"
    }
}

plugins {
    id "java"
    id "application"
//    id "org.openjfx.javafxplugin" version "0.0.9"
    id "org.beryx.jlink" version "2.17.7"
}

apply plugin: "com.github.siordache-forks.javafx-gradle-plugin"


group = "io.github.mzmine"
version = "3.0"
description = "MZmine"
sourceCompatibility = "14"
targetCompatibility = "14"
defaultTasks 'clean', 'jlinkZip'


// Check the OS
project.ext.osSuffix = OperatingSystem.current().getName().replaceAll(" ", "_")
if (OperatingSystem.current().isMacOsX())
    project.ext.osSuffix = "macOS"
if (OperatingSystem.current().isLinux())
    project.ext.osSuffix = "Linux"
if (OperatingSystem.current().isWindows())
    project.ext.osSuffix = "Windows"
println "OS detected as " + project.ext.osSuffix


repositories {
    maven {
        url = "file://" + projectDir + "/src/main/lib"
    }
    maven { // For jmztab 3.0.9+ (https://github.com/PRIDE-Utilities/jmzTab)
        url = "https://dl.bintray.com/lifs/maven/"
    }
    maven { // For jmzml, etc.
        url = "https://www.ebi.ac.uk/Tools/maven/repos/content/groups/ebi-repo/"
    }
    maven {
        url = "https://repo.maven.apache.org/maven2"
    }
    maven { // For SIRIUS ID modules
        url = "https://bio.informatik.uni-jena.de/repository/libs-oss/"
    }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        url = "https://www.xypron.de/repository/"
    }
    maven { // For cpdetector
        url = "https://nexus.nuiton.org/nexus/content/groups/releases/"
    }
}

ext {
    msdkVersion = "0.0.27"
    cdkVersion = "2.3"
    jmztabVersion = "3.0.9"
    swaggerVersion = "1.5.22"
    okhttpVersion = "2.7.5"
    guavaVersion = "28.1-jre"
    slf4jVersion = "1.7.28"
    poiVersion = "4.1.0"
    batikVersion = "1.11"
    controlsfxVersion = "11.0.1"
    imageDirPath = "${buildDir}/${applicationName}-${version}-${osSuffix}"
    imageZipPath = "${buildDir}/${applicationName}-${version}-${osSuffix}-.zip"
}

dependencies {
    implementation "com.github.graphstream:gs-core:2.0-alpha"
    implementation "com.github.graphstream:gs-ui-javafx:2.0-alpha"
    implementation "org.jfree:jfreechart:1.5.0"
    implementation "org.jfree:jfreechart-fx:1.0.1"
    implementation "org.jfree:fxgraphics2d:1.8"
    implementation "org.jfree:jfreesvg:3.3"
    implementation "com.orsonpdf:orsonpdf:1.9"
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "org.apache.commons:commons-math:2.2"
    implementation "edu.ucar:netcdf4:4.5.5"
    implementation "org.ostermiller:utils:1.07.00"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "nz.ac.waikato.cms.weka:weka-stable:3.8.3"
    implementation "net.sourceforge.jmol:jmol:14.29.27"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.slf4j:slf4j-jdk14:$slf4jVersion"
    implementation "org.apache.poi:poi:$poiVersion"
    implementation "org.apache.poi:poi-ooxml:$poiVersion"
    implementation "org.openscience.cdk:cdk-core:$cdkVersion"
    implementation "org.openscience.cdk:cdk-io:$cdkVersion"
    implementation "org.openscience.cdk:cdk-standard:$cdkVersion"
    implementation "org.openscience.cdk:cdk-silent:$cdkVersion"
    implementation "org.openscience.cdk:cdk-formula:$cdkVersion"
    implementation "org.openscience.cdk:cdk-sdg:$cdkVersion"
    implementation "org.openscience.cdk:cdk-renderbasic:$cdkVersion"
    implementation "org.openscience.cdk:cdk-renderawt:$cdkVersion"
    implementation "org.openscience.cdk:cdk-data:$cdkVersion"
    implementation "org.openscience.cdk:cdk-interfaces:$cdkVersion"
    implementation "org.openscience.cdk:cdk-smiles:$cdkVersion"

    implementation "org.openscience.cdk:cdk-charges:$cdkVersion"
    implementation "org.openscience.cdk:cdk-dict:$cdkVersion"
    implementation "org.openscience.cdk:cdk-fingerprint:$cdkVersion"
    implementation "org.openscience.cdk:cdk-forcefield:$cdkVersion"
    implementation "org.openscience.cdk:cdk-fragment:$cdkVersion"
    implementation "org.openscience.cdk:cdk-hash:$cdkVersion"
    implementation "org.openscience.cdk:cdk-inchi:$cdkVersion"
    implementation "org.openscience.cdk:cdk-qsar:$cdkVersion"
    implementation "org.openscience.cdk:cdk-qsaratomic:$cdkVersion"
    implementation "org.openscience.cdk:cdk-qsarmolecular:$cdkVersion"
    implementation "org.openscience.cdk:cdk-reaction:$cdkVersion"
    implementation "org.openscience.cdk:cdk-smarts:$cdkVersion"
    implementation "uk.ac.ebi.jmzml:jmzml:1.7.11"
    implementation "org.postgresql:postgresql:9.3-1102-jdbc41"
    implementation "mysql:mysql-connector-java:5.1.34"
    implementation "org.rsc.chemspider:chemspider-api:1.0.0"
    implementation "org.nuiton.thirdparty:REngine:1.8-5"
    implementation "org.nuiton.thirdparty:Rserve:1.8-5"
    implementation "com.github.jbytecode:RCaller:3.0"
    implementation "mzmine:jmprojection:1.0"
    implementation "mzmine:gslibml:0.0.1"
    implementation "uk.ac.ebi.pride:jmztab-modular-model:$jmztabVersion"
    implementation "uk.ac.ebi.pride:jmztab-modular-util:$jmztabVersion"
    implementation "org.apache.xmlgraphics:fop:1.0"
    implementation "org.freehep:freehep-graphicsio-emf:2.4"
    implementation "io.github.msdk:msdk-io-mzml:$msdkVersion"
    implementation "io.github.msdk:msdk-io-netcdf:$msdkVersion"
    implementation "io.github.msdk:msdk-featuredetection-adap3d:$msdkVersion"
    implementation "io.github.msdk:msdk-id-sirius:$msdkVersion"
    implementation "org.xerial:sqlite-jdbc:3.8.11.2"
    implementation "org.du-lab.adap:adap:4.1.4"
    implementation "gnf:clustering:20130919"
    implementation "it.unimi.dsi:fastutil:8.2.2"
    implementation "com.itextpdf:itextpdf:5.5.13.1"
    implementation "org.apache.xmlgraphics:xmlgraphics-commons:2.3"
    implementation "org.apache.xmlgraphics:batik-util:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-transcoder:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-codec:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-ext:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-awt-util:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-dom:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-svggen:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-svg-dom:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-anim:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-rasterizer:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-swing:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-gui-util:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-ttf2svg:$batikVersion"
    implementation "org.apache.xmlgraphics:batik-parser:$batikVersion"
    implementation "net.sf.epsgraphics:epsgraphics:1.2"
    implementation "com.miglayout:miglayout:3.7.4"
    implementation "javax.xml.bind:jaxb-api:2.3.1"
//    implementation "com.sun.xml.bind:jaxb-core:2.3.0.1"
//    implementation "com.sun.xml.bind:jaxb-impl:2.3.2"
    implementation "javax.activation:javax.activation-api:1.2.0"
    implementation "javax.mail:javax.mail-api:1.6.2"
    implementation "io.swagger:swagger-annotations:$swaggerVersion"
    implementation "com.squareup.okhttp:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp:logging-interceptor:$okhttpVersion"
    implementation "com.google.code.gson:gson:2.8.5"
    implementation "io.gsonfire:gson-fire:1.8.0"
    implementation "org.threeten:threetenbp:1.3.8"
    implementation("org.controlsfx:controlsfx:$controlsfxVersion") {
        exclude group: "org.openjfx"
    }
    implementation "org.drjekyll:fontchooser:2.4"
    implementation "org.json:json:20190722"
    implementation("com.panemu:tiwulfx:3.0") { // For DetachableTabPane
        exclude group: "org.openjfx"
    }
    implementation "com.github.oshi:oshi-core:4.5.2" // because the version that is pulled by SIRIUS crashes
}

/*
 * Remove the xml-apis dependencies to avoid a compilation error in Eclipse.
 * The org.w3c.dom package is present in the java.xml module as well as in these dependencies.
 * That is illegal (https://bugs.eclipse.org/bugs/show_bug.cgi?id=536928).
 */
configurations.all {
  exclude group: "xml-apis", module: "xml-apis"
  exclude group: "xml-apis", module: "xml-apis-ext"
  exclude group: "xom", module: "xom"
  exclude group: "ch.qos.logback", module: "logback-core"
  exclude group: "ch.qos.logback", module: "logback-classic"
  exclude group: "gurobi", module: "gurobi-linux64"
  exclude group: "cplex", module: "cplex"

  exclude group: "uk.ac.ebi.pride.architectural", module: "pride-xml-handling"
  exclude group: "uk.ac.ebi.pride.architectural", module: "pride-logging"
  exclude group: "com.github.fommil.netlib", module: "all"
  exclude group: "org.jgrapht", module: "jgrapht"
  exclude group: "de.unijena.bioinf.ms", module: "sirius_api"
}





/*
 * Include JavaFX modules
 */
javafx {
    version = "14"
    modules = [
                "javafx.web",
                "javafx.fxml",
                "javafx.swing",
              ]
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
/*
 * Set the basic Java runtime parameters (heap size etc.)
 */
application {
    mainClassName = "io.github.mzmine.main.MZmineCore"
    applicationName = "MZmine"
    executableDir = ""
    applicationDefaultJvmArgs = ["-showversion",
                                 "-XX:MaxHeapFreeRatio=100",
                                 "-XX:InitialRAMPercentage=30",
                                 "-XX:MinRAMPercentage=80",
                                 "-XX:MaxRAMPercentage=80",
                                 "-Djava.library.path=lib",
                                 "-enableassertions",
                                 "-Dapple.awt.application.name=MZmine ${version}"
                                ]
}
/*
 * Provide a default start script for this platform
 */
startScripts {
    applicationName = "startMZmine-" + osSuffix
    classpath = files("lib/*")
    doLast {
        if (OperatingSystem.current().isWindows()) {
            delete unixScript
            // Temporary fix for https://github.com/gradle/gradle/issues/10387
            windowsScript.text = windowsScript.text.replace('set JAVA_HOME=\"%~dp0.."', 'set JAVA_HOME="%~dp0"')
        } else {
            delete windowsScript
        }
    }
}

/*
 * Build the JVM runtime using jlink
 */


jlink {
    forceMerge 'javax.json'
    imageDir = file("${buildDir}/${applicationName}-${version}-${osSuffix}")
    imageZip = file(relativePath(imageDir) + ".zip")
    mergedModule{
        requires 'java.desktop'
        requires "java.logging"
        requires "java.rmi"
        requires "java.sql"
        requires "java.datatransfer"
        requires "java.management"
        requires "java.xml"
        requires  "java.xml.crypto"
        requires "jdk.xml.dom"
        requires "java.naming"
        requires "java.transaction.xa"
        requires "java.scripting"
        requires "jdk.jsobject"
        requires "jdk.jfr"
        requires "java.security.sasl"
        requires "java.security.jgss"
        requires "jdk.unsupported"
        requires "jdk.unsupported.desktop"
    }
    launcher{
        name = 'mzmine'
    }
    options = ["--compress=2", "--vm=server", "--no-header-files", "--no-man-pages", "--output", "jre/jre"]
}

tasks.prepareMergedJarsDir.doLast {
    file("$mergedJarsDir.asFile/netscape").deleteDir() // already available in module jdk.jsobject
}

patchModules.config = [
        "cdk.core=cdk-atomtype-${cdkVersion}.jar,cdk-charges-${cdkVersion}.jar,cdk-ctab-${cdkVersion}.jar,cdk-data-${cdkVersion}.jar,cdk-dict-${cdkVersion}.jar,cdk-fingerprint-${cdkVersion}.jar,cdk-forcefield-${cdkVersion}.jar,cdk-formula-${cdkVersion}.jar,cdk-fragment-${cdkVersion}.jar,cdk-hash-${cdkVersion}.jar,cdk-inchi-${cdkVersion}.jar,cdk-interfaces-${cdkVersion}.jar,cdk-io-${cdkVersion}.jar,cdk-ioformats-${cdkVersion}.jar,cdk-isomorphism-${cdkVersion}.jar,cdk-qsar-${cdkVersion}.jar,cdk-qsaratomic-${cdkVersion}.jar,cdk-qsarmolecular-${cdkVersion}.jar,cdk-reaction-${cdkVersion}.jar,cdk-render-${cdkVersion}.jar,cdk-renderawt-${cdkVersion}.jar,cdk-renderbasic-${cdkVersion}.jar,cdk-sdg-${cdkVersion}.jar,cdk-silent-${cdkVersion}.jar,cdk-smarts-${cdkVersion}.jar,cdk-smiles-${cdkVersion}.jar,cdk-standard-${cdkVersion}.jar,cdk-valencycheck-${cdkVersion}.jar" as String,
        "netlib.java=arpack_combined_all-0.1.jar",
        "avalon.framework.impl=avalon-framework-api-4.3.1.jar",
        "beam.func=beam-core-1.3.3.jar",
        "chemical.db.oss=chemdb_file_oss-1.1.3.jar,chemdb_rest_oss-1.1.3.jar,chemdb_sql_oss-1.1.3.jar",
        "commons.io=clustering-20130919.jar,jmol-14.29.27.jar",
        "commons.logging=jcl-over-slf4j-1.7.26.jar",
        "ejml.all=ejml-core-0.38.jar",
        "ejml.zdense=ejml-cdense-0.38.jar,ejml-ddense-0.38.jar,ejml-fdense-0.38.jar",
        "java.cup.11b.runtime=java-cup-11b-2015.03.26.jar,xalan-2.7.2.jar",
        "mass.decomposer=decomp_cli-4.0.1.jar",
        "junit=hamcrest-core-1.1.jar"
]

compileJava {
    moduleOptions {
        addExports = [
                'cdk.core/org.openscience.cdk.exception': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.event': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.formula': 'io.github.mzmine,msdk.id.sirius,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.geometry': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.inchi': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.interfaces': 'io.github.mzmine,msdk.datamodel,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.layout': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.renderer': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.renderer.color': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.renderer.font': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.renderer.generators': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.renderer.generators.standard': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.renderer.visitor': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.silent': 'io.github.mzmine,ALL-UNNAMED',
                'cdk.core/org.openscience.cdk.smiles': 'io.github.mzmine,ALL-UNNAMED',
                'org.json/json': 'io.github.mzmine,ALL-UNNAMED',
                'java.json/javax.json': 'io.github.mzmine,ALL-UNNAMED',
                'commons.io/org.gnf.clustering': 'io.github.mzmine,ALL-UNNAMED',
                'commons.io/org.gnf.clustering.sequentialcache': 'io.github.mzmine,ALL-UNNAMED',
                'commons.io/org.jmol.adapter.smarter': 'io.github.mzmine,ALL-UNNAMED',
                'commons.io/org.jmol.api': 'io.github.mzmine,ALL-UNNAMED',
                'commons.io/org.jmol.util': 'io.github.mzmine,ALL-UNNAMED',
        ]
    }
}

/*
 * Copy the resources and logging properties
 */
tasks.jlink.doLast {

    // Remove the "release" file produced by jlink
    delete file(relativePath(imageDir) + "/release")

    copy {
        from("log")
        into(relativePath(imageDir) + "/log")
    }
    copy {
        from("manual.pdf")
        into(relativePath(imageDir))
    }
    copy {
        from("LICENSE.txt")
        into(relativePath(imageDir) + "/legal/MZmine/")
    }
    copy {
        from("src/main/lib/vendor_lib")
        into(relativePath(imageDir) + "/lib/vendor_lib")
    }

}

/*
 * This is important in order to copy all .java, .fxml, and help files into the final MZmine jar.
 * The .java files are only for people who want to check the source codes.
 * But the .fxml and help files are required for the GUI.
 */
jar {
  sourceSets.main.resources.srcDirs += ["src/main/java"]
}

/*
 * Add MZmine version number to mzmineversion.properties
 */
processResources {
    filesMatching("mzmineversion.properties") {
        expand(project.properties)
    }
}
